from tronpy import Tron
from tronpy.keys import PrivateKey
from tronpy.providers import HTTPProvider
import os
import sys
import time
import requests
from datetime import datetime

class TronTransferBot:
    def __init__(self, master_private_key, slave_address, network="mainnet", api_key=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ TRX
        """
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö —É–∑–ª–æ–≤ TRON
        self.alternative_nodes = [
            "https://api.trongrid.io",
            "https://api.tronstack.io",
            "https://api.shasta.trongrid.io" if network == "testnet" else "https://api.trongrid.io",
            "https://tron-rpc.publicnode.com",
            "https://tron.mytokenpocket.vip"
        ]
        self.api_key = api_key
        self.network = network

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π –∏ –∞–¥—Ä–µ—Å–æ–≤
        self.master_private_key = PrivateKey(bytes.fromhex(master_private_key))
        self.master_address = self.master_private_key.public_key.to_base58check_address()
        self.slave_address = slave_address

        print(f"üë§ Master: {self.master_address}")
        print(f"üë§ Slave: {self.slave_address}")

    def create_client_with_api_key(self, node_url):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π API –∫–ª—é—á–∞ –¥–ª—è TronGrid"""
        try:
            if self.api_key and "trongrid" in node_url:
                # –î–ª—è TronGrid –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å API –∫–ª—é—á–æ–º
                client = Tron(HTTPProvider(node_url))
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –≤—Ä—É—á–Ω—É—é
                if hasattr(client._client, 'session'):
                    client._client.session.headers.update({"TRON-PRO-API-KEY": self.api_key})
                elif hasattr(client._client.provider, 'session'):
                    client._client.provider.session.headers.update({"TRON-PRO-API-KEY": self.api_key})
                return client
            else:
                return Tron(HTTPProvider(node_url))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {node_url}: {e}")
            return None

    def test_node_connectivity(self, node_url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É–∑–ª–∞"""
        try:
            response = requests.get(f"{node_url}/wallet/getnodeinfo", timeout=10)
            return response.status_code == 200
        except:
            return False

    def get_trx_balance(self, address):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å TRX –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞, –ø—Ä–æ–±—É—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —É–∑–ª—ã"""
        for node in self.alternative_nodes:
            try:
                print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {node}...")
                if not self.test_node_connectivity(node):
                    print(f"‚ö†Ô∏è –£–∑–µ–ª {node} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    continue
                
                print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å {node}...")
                client = self.create_client_with_api_key(node)
                if client is None:
                    continue
                    
                account = client.get_account(address)
                balance_sun = account.get('balance', 0)
                balance_trx = balance_sun / 1_000_000
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å —Å {node}")
                return balance_trx
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å {node}: {e}")
        
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –≤—Å–µ—Ö —É–∑–ª–∞—Ö")
        return None

    def transfer_trx(self, slave_balance):
        """–ü–µ—Ä–µ–≤–æ–¥ TRX —Å–æ slave –Ω–∞ master –∞–∫–∫–∞—É–Ω—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º 0.81 TRX)"""
        try:
            amount_to_transfer = slave_balance - 0.81

            if amount_to_transfer <= 0:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–±–∞–ª–∞–Ω—Å: {slave_balance:.6f} TRX)")
                return False, None

            print(f"üí∏ –ü–µ—Ä–µ–≤–æ–¥ {amount_to_transfer:.6f} TRX (–æ—Å—Ç–∞–≤–ª—è–µ–º 0.81 TRX –Ω–∞ –±–∞–ª–∞–Ω—Å–µ)...")

            # –î–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π —É–∑–µ–ª
            for node in self.alternative_nodes:
                try:
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ {node}...")
                    if not self.test_node_connectivity(node):
                        print(f"‚ö†Ô∏è –£–∑–µ–ª {node} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                        continue
                    
                    client = self.create_client_with_api_key(node)
                    if client is None:
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    transaction = client.trx.transfer(
                        from_=self.slave_address,
                        to=self.master_address,
                        amount=int(amount_to_transfer * 1_000_000)
                    ).build()
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    signed_transaction = transaction.sign(self.master_private_key)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    result = signed_transaction.broadcast()
                    
                    if result and 'txid' in result:
                        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        print(f"üìä –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {amount_to_transfer:.6f} TRX")
                        print(f"üîó TXID: {result['txid']}")
                        print(f"üåê https://tronscan.org/#/transaction/{result['txid']}")
                        return True, result['txid']
                    else:
                        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {result}")
                        continue
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å {node}: {e}")
                    continue
            
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —É–∑–ª–µ")
            return False, None

        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
            return False, None

    def check_and_transfer(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {datetime.now()}")
        print("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å slave –∞–∫–∫–∞—É–Ω—Ç–∞
        slave_balance = self.get_trx_balance(self.slave_address)

        if slave_balance is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å slave –∞–∫–∫–∞—É–Ω—Ç–∞")
            return False

        print(f"üí∞ –ë–∞–ª–∞–Ω—Å slave: {slave_balance:.6f} TRX")

        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 2 TRX (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Å—Ç–∞–≤–∏—Ç—å 0.81), –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        if slave_balance > 2.0:
            transfer_amount = slave_balance - 0.81
            print(f"üéØ –ë–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ {transfer_amount:.6f} TRX (–æ—Å—Ç–∞–≤–ª—è–µ–º 0.81 TRX)")

            success, txid = self.transfer_trx(slave_balance)
            if success:
                print(f"üéâ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
                time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                new_balance = self.get_trx_balance(self.slave_address)
                if new_balance is not None:
                    print(f"üìä –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å slave: {new_balance:.6f} TRX")

                return True
            else:
                print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")
                return False
        else:
            print(f"‚è±Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω—É–∂–Ω–æ > 2 TRX, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å 0.81)")
            return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    MASTER_PRIVATE_KEY = os.getenv('MASTER_PRIVATE_KEY')
    SLAVE_ADDRESS = os.getenv('SLAVE_ADDRESS')
    NETWORK = os.getenv('NETWORK', 'mainnet')
    API_KEY = os.getenv('API_KEY')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not MASTER_PRIVATE_KEY:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è MASTER_PRIVATE_KEY")
        sys.exit(1)

    if not SLAVE_ADDRESS:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è SLAVE_ADDRESS")
        sys.exit(1)

    if len(MASTER_PRIVATE_KEY) != 64:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞")
        sys.exit(1)

    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = TronTransferBot(MASTER_PRIVATE_KEY, SLAVE_ADDRESS, NETWORK, API_KEY)
        success = bot.check_and_transfer()

        print("=" * 50)
        if success:
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
